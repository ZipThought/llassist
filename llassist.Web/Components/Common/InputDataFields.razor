@using llassist.Common.Models.Library

<div class="structured-data-editor">
    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="alert alert-danger alert-dismissible fade show" role="alert">
            @errorMessage
            <button type="button" class="btn-close" @onclick="ClearError"></button>
        </div>
    }

    <div class="table-responsive">
        <table class="table table-sm">
            <thead>
                <tr>
                    <th style="width: 25%">Field Name</th>
                    <th style="width: 35%">Value</th>
                    <th style="width: 20%">Data Type</th>
                    <th style="width: 20%">Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var field in Fields)
                {
                    <tr>
                        <td>
                            <input type="text" class="form-control form-control-sm"
                                placeholder="Enter field name"
                                value="@field.Key"
                                @onchange="@(e => UpdateKey(field, e.Value?.ToString()))" />
                        </td>
                        <td>
                            <input type="text" class="form-control form-control-sm"
                                placeholder="Enter value"
                                value="@field.Value"
                                @onchange="@(e => UpdateValue(field, e.Value?.ToString()))" />
                        </td>
                        <td>
                            <select class="form-select form-select-sm"
                                value="@field.DataType"
                                @onchange="@(e => UpdateDataType(field, e.Value?.ToString()))">
                                <option value="string">Text</option>
                                <option value="number">Number</option>
                                <option value="date">Date</option>
                                <option value="url">URL</option>
                                <option value="email">Email</option>
                            </select>
                        </td>
                        <td>
                            <button type="button" class="btn btn-sm btn-outline-danger d-flex align-items-center gap-1" 
                                    @onclick="@(() => RemoveField(field))">
                                <i class="bi bi-trash"></i>
                                <span>Remove</span>
                            </button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>

    <div class="d-flex justify-content-start mt-3">
        <button type="button" class="btn btn-sm btn-primary d-flex align-items-center gap-2" @onclick="AddField">
            <i class="bi bi-plus-lg"></i>
            <span>Add New Field</span>
        </button>
    </div>
</div>

<style>
    .structured-data-editor {
        background-color: #f8f9fa;
        border-radius: 0.375rem;
        padding: 1.25rem;
    }

    .structured-data-editor .table {
        background-color: white;
        border-radius: 0.25rem;
        margin-bottom: 0;
    }

    .structured-data-editor .table th {
        background-color: #f8f9fa;
        font-weight: 600;
        color: #495057;
        padding: 0.75rem 0.5rem;
    }

    .structured-data-editor .table td {
        vertical-align: middle;
        padding: 0.5rem;
    }

    .gap-1 {
        gap: 0.25rem;
    }

    .gap-2 {
        gap: 0.5rem;
    }
</style>

@code {
    [Parameter]
    public DataFieldCollection Collection { get; set; } = new();

    [Parameter]
    public string Schema { get; set; } = string.Empty;

    [Parameter]
    public EventCallback<DataFieldCollection> CollectionChanged { get; set; }

    private IReadOnlyCollection<DataField> Fields => Collection.Fields;
    private string? errorMessage;

    private void ClearError() => errorMessage = null;

    private async Task NotifyChange()
    {
        await CollectionChanged.InvokeAsync(Collection);
    }

    private async Task AddField()
    {
        try
        {
            var baseKey = "field";
            var counter = Fields.Count + 1;
            var newKey = $"{baseKey}{counter}";

            while (Fields.Any(f => f.Key == newKey))
            {
                counter++;
                newKey = $"{baseKey}{counter}";
            }

            Collection.AddField(new DataField
            {
                Key = newKey,
                Value = string.Empty,
                DataType = "string",
                Schema = Schema,
                Order = Fields.Count + 1
            });
            await NotifyChange();
        }
        catch (InvalidOperationException ex)
        {
            errorMessage = $"Could not add field: {ex.Message}";
        }
    }

    private async Task UpdateKey(DataField field, string? newKey)
    {
        if (string.IsNullOrEmpty(newKey))
        {
            errorMessage = "Field key cannot be empty";
            return;
        }

        try
        {
            if (Fields.Any(f => f.Key == newKey && f != field))
            {
                errorMessage = $"Field with key '{newKey}' already exists. Please use a different key.";
                return;
            }

            Collection.RemoveField(field.Key, Schema);
            Collection.AddField(new DataField
            {
                Key = newKey,
                Value = field.Value,
                DataType = field.DataType,
                Schema = Schema,
                Order = field.Order,
                Required = field.Required
            });
            await NotifyChange();
        }
        catch (InvalidOperationException ex)
        {
            errorMessage = $"Could not update field key: {ex.Message}";
        }
    }

    private async Task UpdateValue(DataField field, string? value)
    {
        try
        {
            Collection.RemoveField(field.Key, Schema);
            Collection.AddField(new DataField
            {
                Key = field.Key,
                Value = value ?? string.Empty,
                DataType = field.DataType,
                Schema = Schema,
                Order = field.Order,
                Required = field.Required
            });
            await NotifyChange();
        }
        catch (InvalidOperationException ex)
        {
            errorMessage = $"Could not update field value: {ex.Message}";
        }
    }

    private async Task UpdateDataType(DataField field, string? dataType)
    {
        try
        {
            Collection.RemoveField(field.Key, Schema);
            Collection.AddField(new DataField
            {
                Key = field.Key,
                Value = field.Value,
                DataType = dataType ?? "string",
                Schema = Schema,
                Order = field.Order,
                Required = field.Required
            });
            await NotifyChange();
        }
        catch (InvalidOperationException ex)
        {
            errorMessage = $"Could not update field type: {ex.Message}";
        }
    }

    private async Task RemoveField(DataField field)
    {
        try
        {
            Collection.RemoveField(field.Key, Schema);
            await NotifyChange();
        }
        catch (InvalidOperationException ex)
        {
            errorMessage = $"Could not remove field: {ex.Message}";
        }
    }
} 