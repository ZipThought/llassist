@page "/projects/edit/{id?}"
@rendermode InteractiveServer

@inject ProjectApiClient ProjectApiClient
@inject NavigationManager Navigation

<h3>@(isNewProject ? "Create Project" : "Edit Project")</h3>

<EditForm Model="@project" OnValidSubmit="HandleValidSubmit" FormName="editProjectForm" class="needs-validation" novalidate>
    <DataAnnotationsValidator />
    <ValidationSummary class="text-danger" />

    <table class="table">
        <tbody>
            <tr>
                <td>
                    <label for="name" class="form-label">Name:</label>
                </td>
                <td>
                    <InputText id="name" class="form-control" @bind-Value="project.Name" />
                </td>
            </tr>
            <tr>
                <td>
                    <label for="description" class="form-label">Description:</label>
                </td>
                <td>
                    <InputText id="description" class="form-control" @bind-Value="project.Description" />
                </td>
            </tr>
            <!-- Add more fields as necessary -->
        </tbody>
    </table>
    <button type="submit" class="btn btn-primary">Save Project</button>
</EditForm>

@if (!isNewProject)
{
    <h4 class="mt-4">Research Questions</h4>
    <table class="table">
        <thead>
            <tr>
                <th>Question</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var question in researchQuestions.Questions)
            {
                <tr>
                    <td>@question.Text</td>
                    <td>
                        <button class="btn btn-secondary me-2" @onclick="() => EditResearchQuestion(question)">Edit</button>
                        <button class="btn btn-danger me-2" @onclick="() => DeleteResearchQuestion(question)">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>

    <div class="mb-3">
        <InputText @bind-Value="currentQuestion.Text" class="form-control" placeholder="New Research Question" />
    </div>
    <button class="btn btn-primary" @onclick="HandleQuestionSubmit">
        @(isEditingQuestion ? "Save" : "Add") Question
    </button>
}

@code {
    [Parameter] public string? Id { get; set; }

    [SupplyParameterFromForm(FormName = "editProjectForm")]
    public CreateEditProjectViewModel project { get; set; } = new CreateEditProjectViewModel();

    private bool isNewProject => string.IsNullOrEmpty(Id);
    private ResearchQuestionsViewModel researchQuestions = new();
    private AddEditResearchQuestionViewModel currentQuestion = new();
    private bool isEditingQuestion = false;
    private int editingQuestionIndex = -1;

    protected override async Task OnInitializedAsync()
    {
        if (!isNewProject && Id != null)
        {
            var existingProject = await ProjectApiClient.GetProjectAsync(Id);
            if (existingProject != null)
            {
                project.Name = existingProject.Name;
                project.Description = existingProject.Description;
                researchQuestions = existingProject.ResearchQuestions ?? new ResearchQuestionsViewModel();
            }
        }
    }

    private async Task HandleValidSubmit()
    {
        if (isNewProject)
        {
            await ProjectApiClient.CreateProjectAsync(project);
        }
        else if (Id != null)
        {
            await ProjectApiClient.UpdateProjectAsync(Id, project);
        }

        Navigation.NavigateTo("/project-list");
    }

    private void EditResearchQuestion(QuestionViewModel question)
    {
        currentQuestion = new AddEditResearchQuestionViewModel { Text = question.Text, Definitions = question.Definitions };
        isEditingQuestion = true;
        editingQuestionIndex = researchQuestions.Questions.IndexOf(question);
    }

    private async Task HandleQuestionSubmit()
    {
        if (string.IsNullOrWhiteSpace(currentQuestion.Text))
            return;

        if (Id != null)
        {
            if (isEditingQuestion)
            {
                await ProjectApiClient.UpdateResearchQuestionAsync(Id, editingQuestionIndex, currentQuestion);
                researchQuestions.Questions[editingQuestionIndex] = new QuestionViewModel { Text = currentQuestion.Text, Definitions = currentQuestion.Definitions };
            }
            else
            {
                await ProjectApiClient.AddResearchQuestionAsync(Id, currentQuestion);
                researchQuestions.Questions.Add(new QuestionViewModel { Text = currentQuestion.Text, Definitions = currentQuestion.Definitions });
            }

            currentQuestion = new AddEditResearchQuestionViewModel();
            isEditingQuestion = false;
            editingQuestionIndex = -1;
        }
    }

    private async Task DeleteResearchQuestion(QuestionViewModel question)
    {
        if (Id != null)
        {
            var index = researchQuestions.Questions.IndexOf(question);
            await ProjectApiClient.DeleteResearchQuestionAsync(Id, index);
            researchQuestions.Questions.RemoveAt(index);
        }
    }
}