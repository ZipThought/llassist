@page "/project-list"
@rendermode InteractiveServer
@inject ProjectApiClient ProjectApiClient
@inject ArticleApiClient ArticleApiClient
@inject AppSettingApiClient AppSettingApiClient
@inject NavigationManager Navigation
@inject IOptions<FileUploadSettings> FileUploadSettings

@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.Extensions.Options
@using llassist.Common.Models

<PageTitle>Projects</PageTitle>

<h3>Projects</h3>

<button class="btn btn-primary mb-3" @onclick="CreateProject">Create New Project</button>

@if (projects == null)
{
    <p>Loading...</p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th style="width: 30%">Name</th>
                <th style="width: 50%">Description</th>
                <th class="text-end" style="width: 20%">Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var project in projects)
            {
                <tr @onclick="() => SelectProject(project.Id)"
                    class="@(project.Id == selectedProjectId ? "table-active" : "") clickable-row">
                    <td style="width: 30%"><strong>@project.Name</strong></td>
                    <td style="width: 50%">@project.Description</td>
                    <td class="text-end" style="width: 20%">
                        <div class="project-actions">
                            <button class="btn btn-secondary" @onclick:stopPropagation="true" @onclick="() => EditProject(project.Id)">
                                Edit
                            </button>
                            <button class="btn btn-danger" @onclick:stopPropagation="true" @onclick="() => DeleteProject(project.Id)">
                                Delete
                            </button>
                            <button class="btn btn-primary" @onclick:stopPropagation="true" @onclick="() => NavigateToAnalysis(project.Id)">
                                <strong>Analysis</strong>
                            </button>
                        </div>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@if (!string.IsNullOrEmpty(selectedProjectId))
{
    <div class="content-card">
        <h4>Upload Papers for @selectedProjectName</h4>
        @if (uploadSettings != null)
        {
            <div class="file-upload-area">
                <InputFile @key="inputFileKey" OnChange="HandleFileSelected" class="d-none" id="fileInput" />
                <label for="fileInput" class="mb-0 w-100">
                    <div class="text-center">
                        <i class="bi bi-cloud-upload fs-2 mb-2"></i>
                        <p class="mb-1">@(isUploading ? "Uploading..." : "Upload a file or drag and drop")</p>
                        <p class="text-muted small">
                            @string.Join(", ", uploadSettings.AllowedExtensions) up to @uploadSettings.MaxSizeMB MB
                        </p>
                        @if (!string.IsNullOrEmpty(uploadError))
                        {
                            <p class="text-danger small">@uploadError</p>
                        }
                    </div>
                </label>
            </div>
        }
        else
        {
            <div class="alert alert-warning" role="alert">
                File upload is currently unavailable. Please try again later.
            </div>
        }
    </div>
}

@if (articles != null && articles.Any())
{
    <h4>Articles for @selectedProjectName</h4>
    <table class="table">
        <thead>
            <tr>
                <th style="width: 30%">Title & Authors</th>
                <th style="width: 10%">Year</th>
                <th>Abstract</th>
                <th style="width: 100px" class="text-center">Must Read</th>
                <th style="width: 50px" class="text-center">Action</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var article in articles)
            {
                <tr>
                    <td>
                        <div class="article-title">@article.Title</div>
                        <div class="article-authors">@article.Authors</div>
                    </td>
                    <td class="text-center">@article.Year</td>
                    <td class="abstract-column">
                        <p>@article.Abstract</p>
                    </td>
                    <td class="text-center">
                        <div class="must-read-indicator @(article.MustRead ? "must-read-true" : "must-read-false")">
                            @(article.MustRead ? "Yes" : "No")
                        </div>
                    </td>
                    <td class="text-center">
                        <button class="btn btn-danger"
                                @onclick="() => DeleteArticle(selectedProjectId, article.Id)" 
                                @onclick:stopPropagation="true">
                            Delete
                        </button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}
else if (!string.IsNullOrEmpty(selectedProjectId))
{
    <p>No articles found for this project.</p>
}

<style>
    .clickable-row {
        cursor: pointer;
        transition: background-color 0.2s ease;
    }

    .clickable-row:hover {
        background-color: #f8f9fa;
    }

    .table-active {
        background-color: #e9ecef;
    }

    .action-buttons-grid {
        display: grid;
        grid-template-columns: repeat(2, 1fr);
        gap: 0.5rem;
        justify-content: end;
        min-width: 200px;
    }

    .action-buttons-row {
        display: flex;
        gap: 0.5rem;
        justify-content: flex-end;
    }

    .article-title {
        font-weight: 600;
        color: #2B4380;
        margin-bottom: 0.25rem;
    }

    .article-authors {
        font-size: 0.875rem;
        color: #666;
    }

    .abstract-column p {
        margin: 0;
        overflow: hidden;
        text-overflow: ellipsis;
        display: -webkit-box;
        -webkit-line-clamp: 6;
        -webkit-box-orient: vertical;
        font-size: 0.875rem;
        line-height: 1.5;
        max-height: 9em;
    }

    .table td.abstract-column {
        max-width: 500px;
        padding-right: 2rem;
    }

    .must-read-indicator {
        display: inline-block;
        padding: 0.25rem 0.5rem;
        border-radius: 4px;
        font-size: 0.875rem;
        font-weight: 500;
    }

    .must-read-true {
        background-color: #e8f5e9;
        color: #2e7d32;
    }

    .must-read-false {
        background-color: #f5f5f5;
        color: #757575;
    }

    .btn {
        min-width: 90px;
        width: 100%;
    }

    .project-actions {
        display: flex;
        gap: 0.1rem;
        justify-content: flex-end;
        width: 100%;
    }

    .project-actions .btn {
        flex: 1;
        min-width: 100px; 
        white-space: wrap;
    }
</style>

@code {
    private IEnumerable<ProjectViewModel>? projects;
    private IEnumerable<ArticleViewModel>? articles;
    private string? selectedProjectId;
    private string? selectedProjectName;
    private string inputFileKey = Guid.NewGuid().ToString();
    private FileUploadSettings? uploadSettings;
    private bool isUploading;
    private string uploadError = string.Empty;

    protected override async Task OnInitializedAsync()
    {      
        var tasks = new[]
        {
            LoadProjects(),
            LoadFileUploadSettings()
        };
        await Task.WhenAll(tasks);
    }

    private async Task LoadProjects()
    {
        projects = await ProjectApiClient.GetAllProjectsAsync();
    }

    private async Task LoadFileUploadSettings()
    {
        uploadSettings = await AppSettingApiClient.GetFileUploadSettingsAsync();
    }

    private void CreateProject()
    {
        Navigation.NavigateTo("/projects/edit");
    }

    private void EditProject(string id)
    {
        Navigation.NavigateTo($"/projects/edit/{id}");
    }

    private void NavigateToAnalysis(string projectId)
    {
        Navigation.NavigateTo($"/project-analysis/{projectId}");
    }
    
    private async Task DeleteProject(string id)
    {
        await ProjectApiClient.DeleteProjectAsync(id);
        await LoadProjects();
        if (selectedProjectId == id)
        {
            selectedProjectId = null;
            selectedProjectName = null;
            articles = null;
        }
    }

    private async Task SelectProject(string id)
    {
        if (selectedProjectId == id)
        {
            // Deselect if clicking the same project
            selectedProjectId = null;
            selectedProjectName = null;
            articles = null;
        }
        else
        {
            selectedProjectId = id;
            await LoadProjectDetails();
        }
    }

    private async Task LoadProjectDetails()
    {
        if (!string.IsNullOrEmpty(selectedProjectId))
        {
            var project = await ProjectApiClient.GetProjectAsync(selectedProjectId);
            if (project != null)
            {
                articles = project.Articles;
                selectedProjectName = project.Name;
            }
        }
    }

    private async Task HandleFileSelected(InputFileChangeEventArgs e)
    {
        uploadError = string.Empty;  // Clear error on new attempt

        if (e.File == null || string.IsNullOrEmpty(selectedProjectId))
        {
            uploadError = "No file selected or no project selected";
            return;
        }

        await UploadFile(e.File);
    }

    private async Task UploadFile(IBrowserFile file)
    {
        try
        {
            isUploading = true;
            var result = await ProjectApiClient.UploadCSVAsync(selectedProjectId, file);
            
            if (result != null)
            {
                articles = result.Articles;
                inputFileKey = Guid.NewGuid().ToString();
                uploadError = string.Empty;  // Clear error after successful upload
            }
            else
            {
                uploadError = "Upload failed. Please try again.";
            }
        }
        catch (Exception ex)
        {
            uploadError = $"Error: {ex.Message}";
        }
        finally
        {
            isUploading = false;
        }
    }

    private async Task DeleteArticle(string projectId, string articleId)
    {
        await ArticleApiClient.DeleteArticleAsync(projectId, articleId);
        await LoadProjectDetails();
    }
}
